---
title: "Joins"
subtitle: "&nbsp;"
author: Rodney Dyer, PhD
format: revealjs
execute:
  echo: true
  message: false
  warning: false
---


## Topics on Joins

- Rationale
- Common Joins
- Filtering Joins
- Spatial Joins
- Airport Dataset

```{r}
#| echo: false
library( tidyverse )
```












# Rationale {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## Multi-Table Data {.smaller}

Rarely do we keep all but the most simple of data in a single table.

:::: {.columns}

::: {.column width="50%"}
#### Table Structure

Consider the two tables to the right.

- Common column labeled *Key*  

- Other data columns (only 1 in each for brevity)
:::

::: {.column width="50%"}
![Example data table structure](https://live.staticflickr.com/65535/50427672632_24e45139a8_c_d.jpg)
:::

::::


## Varieties of Keys üóù {.smaller}

:::: {.columns}

::: {.column width="50%"}
### Primary Key

A *primary key* is a column in a table that uniquely identifies a single row.  There MUST be a unique identifier to be a *Primary Key*.

```{r}
people <- data.frame( Key = c("A","B","C"),
                      Name = c("Bob","Alice","Mary"),
                      Major = c("ENVS", "ENVS", "BIOL") )
people %>%
  count( Key ) 
```

:::

::: {.column width="50%"}
::: {.fragment}
### Foreign Key

A foreign key is one that references a primary key in *another* table.

```{r}
homework <- data.frame( Key = c("A","B","A","D","B"), 
                        Grade = rpois(5,lambda = 100) )
homework
```

Here the `Key` column is referencing a unique row of data in the `people` data table.

:::
:::

::::

















# Taxonomy of Joins {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## Taxonomy of Joins

We can combine the data in these tables in several different ways based upon what we are looking for.  When thinking of joins, we must think about the how we want to select the overlapping sets of keys in both data.frames.

- *Full Join* (aka *outer join*)

- *Left Join*  

- *Right Join*  

- *Inner Join*




## 'Left' & 'Right' Tables

![Example data table structure](https://live.staticflickr.com/65535/50427672632_24e45139a8_c_d.jpg)





## Full/Outer Join

The outer join has *all the data from both left & right tables*.  All keys are present in the result.

![](https://live.staticflickr.com/65535/50427993992_4ccede1574_c_d.jpg)




## Outer Join

All homework and people data.

```{r}
people %>%
  full_join( homework, by="Key" )
```



## Left Join

The left join is one where the result has all the keys from the left but only those in the right one that are in the left.  

![](https://live.staticflickr.com/65535/50427817371_678f0f64c7_c_d.jpg)


:::{.fragment}
```{r}
people %>% left_join( homework, by="Key")
```
:::


## Right Join

The Right join results in all the keys from the right data table and the matching ones from the left.


![](https://live.staticflickr.com/65535/50427125528_0de6281475_c_d.jpg)


:::{.fragment}

```{r}
people %>% right_join( homework, by="Key")
```
:::

## Inner Joins

Inner joins result in the intersection of keys.

![](https://live.staticflickr.com/65535/50427125683_ac44eb1500_c_d.jpg)

:::{.fragment}
```{r}
people %>% inner_join( homework, by="Key")
```
:::






# Filtering Joins {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## Filtering via Join

There are times when the results you are looking for should be based upon items in another `data.frame` object but should not contain information from that second table.


## The Semi Join

We can also use joins to filter values within one `data.frame`.  Here the `semi_join()` keeps everything in the left data that has a key in the right one, but **importantly** it does not import the right data columns into the result.

:::{.fragment}
```{r}
people %>% 
  semi_join( homework, by="Key")
```
:::



## The Anti Join

The opposite of the `semi_join()` is the `anti_join()` which drops everything in the left table that has a key in the right one, leaving only the ones that are unique.


:::{.fragment}
```{r}
people %>%
  anti_join( homework, by = "Key")
```
:::






# Spatial Joins {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## Spatial Joins - Polygons {.scrollable .smaller}

&nbsp;

```{r}
#| echo: false
#| results: hide
library( sf )


if( !file.exists("./data/Districts.zip") ) {
  district_url <- "https://github.com/dyerlab/ENVS-Lectures/raw/master/data/Zoning_Districts-shp.zip"
  download.file( district_url , destfile = "./data/Districts.zip")
  unzip("./data/Districts.zip")
}

suppressMessages( st_read( "Zoning_Districts.shp" ) -> districts)

districts %>%
  filter( OBJECTID == 368 ) %>%
  st_buffer(dist = 1500) %>%
  st_bbox() -> fan_bbox

districts %>%
  st_crop( fan_bbox ) -> theFan

```

- Imported and unzipped shape files (behind the scenes)
- RVA Zoning District Polygons
- Contained in `data.frame`  object
- Each row is a spatial record.

```{r}
summary( theFan )
```


## Spatial Joins - Polygons {.scrollable .smaller}


```{r}
names( theFan )

```

:::{.fragment}
```{r}
theFan[1,]
```
:::

## Spatial Joins

```{r}
plot( theFan["Name"], main="")
```



## Spatial Joins - Vector Data {.scrollable .smaller}

&nbsp;
```{r}
#| results: hide
#| echo: false
if( !file.exists("./data/Roads.zip") ) {
  roads_url <- "https://github.com/dyerlab/ENVS-Lectures/raw/master/data/Centerlines-shp.zip"
  download.file( roads_url, destfile =  "./Roads.zip")
  unzip("Roads.zip")
}
st_read( "Centerlines-shp/tran_Carriageway.shp") %>%
  st_crop( st_bbox( theFan ) ) -> fanRoads

```

- Road systems in RVA 
- Another shapefile folder

```{r}
summary( fanRoads )
```


## Spatial Joins

```{r}
plot( st_geometry( fanRoads ) )
```



## Cleaning Up Spatial Data Frames {.smaller}

```{r}
fanRoads %>%
  select( FullName, OneWay, StreetType,
                 SpeedLimit = PostedSpee, Length = SHAPE_Leng,
                 geometry) %>%
  mutate( OneWay = factor( OneWay ),
          StreetType = factor( StreetType) ) -> fanRoads
summary( fanRoads )
```



## Spatial Join 

```{r}
target <- theFan[ theFan$OBJECTID == 368, ]
plot( st_geometry(target ) ) 
```



## Spatial Join - `st_intersects()`

```{r}
fanRoads %>%
  filter( st_intersects( fanRoads, target, 
                         sparse = FALSE ) == TRUE ) %>%
  st_drop_geometry() %>%
  select( `Street Name` = FullName ) %>%
  arrange( `Street Name` ) %>% 
  unique()
```














# Airport Dataset {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}




## The Library


Four `data.frames` are contained within the library representing all the flights from NYC airports in 2013 (you may need to install this package).

```{r}
library( nycflights13 )
```

- `airlines`  

- `airports`

- `planes`  
 
- `weather`  

- `flights`



## The Coverage



```{r echo=FALSE}
library( leaflet )
airports %>%
  filter( lon < 0,
          lon > -130,
          lat < 54) %>%
  leaflet( ) %>%
  addMarkers( lat = ~lat,
              lng = ~lon,
              popup = ~faa) %>%
  addProviderTiles( provider="OpenTopoMap")
```



## Airlines

```{r}
head(airlines)
```


## Airports

```{r}
head( airports )
```


## Planes

```{r}
head( planes )
```


## Weather


```{r}
head(weather)
```




## Flights

This is the main `data.frame`.

```{r}
names( flights )
```





## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them as an "Issue" on your copy of this GitHub Repository, post to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
